[tool.poetry]
name = "hooting-yard-migration"
version = "0.1.0"
description = "Tool to migrate Hooting Yard episodes from Archive.org to YouTube"
authors = ["Hooting Yard Team"]
readme = "README.md"
packages = [{include = "hooting_yard_migration", from = "src"}]
python = "^3.12"

[tool.poetry.dependencies]
python = "^3.12"
requests = "^2.31.0"
pyyaml = "^6.0.1"
click = "^8.1.7"
google-api-python-client = "^2.100.0"
google-auth-httplib2 = "^0.1.1"
google-auth-oauthlib = "^1.1.0"
internetarchive = "^3.5.0"
tqdm = "^4.66.1"
tenacity = "^8.2.3"
pydantic = "^2.4.2"
aiohttp = "^3.8.6"
aiofiles = "^23.2.1"
mutagen = "^1.47.0"
python-dotenv = "^1.0.0"
rich = "^13.6.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^23.10.1"
ruff = "^0.1.3"
mypy = "^1.6.1"
types-requests = "^2.31.0"
types-pyyaml = "^6.0.12"
ipython = "^8.16.1"
pre-commit = "^3.5.0"

[tool.poetry.scripts]
hooting-yard-migrate = "hooting_yard_migration.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'

[tool.ruff]
line-length = 88
target-version = "py312"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []
fixable = ["ALL"]
unfixable = []

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=hooting_yard_migration --cov-report=term-missing"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]